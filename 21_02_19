- ARIMA Model을 통한 Anomaly Detection Practice.
    issue : 기본적으로 ARIMA Model은 예측모델에 해당한다.
            ACF 값을 통해, Stationary 여부를 판단하고, 대표적으론 차분(Differencing)을 통해 모든 p(xt)와 p(x(t+h)) 값에서 공분산을 같도록 하여, 패턴 분석을 통해 예측해가는 과정이다.
            단, 이는 어디까지나 예측에 한정된 이야기다. Anomaly Detection에 활용하기 위해서는, 예측을 위해 분석하게 되는 Trend를 활용해야함이 관건이다.
            구체적으로는 SARIMA를 활용해야한다. __ ing

- Api를 통해 주식정보 호출 및 Json 파일 활용.
  issue : 1번 호출에 100 rows를 최대로 받을 수 있다. parms_ 파라미터를 잘 활용하여, 반복문을 확인해야하고, 혹시 누실된 값이 있는지 고려해야 하고 
          더불어, 이 내용을 타인에게 공유한다고 가정한다면 보다 논리적인 단계를 코드를 통해 보여주는 것도 중요하겠다고 생각했다.
  
  방책 : 초기 파일을 저장할 때, 특정한 id 값을 붙어서 저장하는 것이 효과적이다.
        os.walk함수를 통해특정 문자열이 파함된 파일을 확인시켜주면, 신뢰할 만한 Datafile 임을 설득하는 과정에서 설득력을 높일 수 있을 것이라 생각한다. 

작성코드 
# 파일 csv변환 및 변환된 파일 불러오기
Sk_by_comp_n = []
for i in range(10):
    sk_name = stock_name_list[i]
    Sk_by_comp[i].to_csv(f'Data/skinfo_{sk_name}.csv',index=False)
    Sk_by_comp_n.append(pd.read_csv(f'Data/skinfo_{sk_name}.csv'))
# 파일 저장상태 확인
def get_file_list_title(sk_name):
    file_list = []
    for root, dirs, files in os.walk("Data/"):
        for filename in files:
            if filename.startswith(f'skinfo_{sk_name}'):
                file_list.append(filename)
    return sorted(file_list)
for i in range(10):
    print(get_file_list_title(stock_name_list[i]))    
  
