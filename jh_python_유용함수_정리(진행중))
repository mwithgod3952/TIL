
- shape 함수
  : 배열의 구조를 반환합니다.
  : 딥러닝 모델 구현 시 인풋에 대한 정의가 필요합니다. 
        예를 들어, Keras의 Embedding 함수를 예로 들어보겠습니다. Embedding은 기존의 원핫 인코딩을 저차원 벡터로 변환하여, 딥러닝 학습에 용이하도록 데이터 형태를 변환하는 방법입니다.
        이를 위해, 기본적으로 input에 대한 정의가 필요합니다. 이를 위해, 통상 배열을 통해 input 데이터의 형태를 지정해줍니다.
        
        배열의 형태를 shape 함수를 통해 확인 할 수 있습니다. 1차원 배열에 대해서는 (원소의 개수,), 2차원 배열에 대해서는 (차원, 각 차원의 원소의 개수), 3차원 배열에 대해서는 분류를 3개로 나누어 
        다음과 같이 표기해줍니다 Ex) (2, 3, 2) 2개의 원소가 3개의 차원, 2개의 차원에 대한 분류를 의미합니다.

해당 예시는 아래와 같습니다.
arr_3 = np.array([0, 1, 2])
arr_3.shape # (3, )

 
# 2x3 배열 -> (2, 3) 반환
arr_2x3 = np.array([ [11, 12, 13], [21, 22, 23] ])
arr_2x3.shape  # (2, 3)

# 2x3x2 배열 -> (2, 3, 2) 반환
arr_2x3x2 = np.array( [ [ [111, 112], [121, 122], [131, 132] ], [ [211, 212], [221, 222], [231, 232] ] ] )
arr_2x3x2.shape  # (2, 3, 2)


- size() 함수 총 원소의 개수를 반환합니다.
  : 일반적으로 각 원소의 구성요소의 개수를 확인하기 원한다면, valus_count()함수가 유용합니다.
  : 이에 인덱스를 부여하여 배열의 구조를 다양하게 확인하고 싶다면 size() 함수를 응용하여 데이터 구조를 파악하는 것도 제법 유용한 방법입니다.
  
  해당 예시는 아래와 같습니다.
  print(df.groupby('intent').size().reset_index(name = 'count'))
  
  먼저. df(type : pd.DataFrame)를 동일한 intent 성질끼리 groupby 하였습니다. 
  가령 예를들어 각 intent에 대하여 같은 성질을 공유하는 데이터의 '행'의 갯수를 확인하길 원한다면, 각 intent 에 대한 size() 함수를 통해 확인할 수 있습니다.
